// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API_Managment_Courses.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Course", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Description = "Przykładowy opis kursu",
                            Title = "Przykładowy tytuł kursu"
                        },
                        new
                        {
                            ID = 2,
                            Description = "Przykładowy drugiego opis kursu",
                            Title = "Przykładowy tytuł drugiego kursu"
                        },
                        new
                        {
                            ID = 3,
                            Description = "Przykładowy trzeciego opis kursu",
                            Title = "Przykładowy tytuł trzeciego kursu"
                        });
                });

            modelBuilder.Entity("CourseEnrollment", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.HasKey("UserID", "CourseID");

                    b.HasIndex("CourseID");

                    b.ToTable("CourseEnrollments");

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            CourseID = 1
                        },
                        new
                        {
                            UserID = 2,
                            CourseID = 2
                        },
                        new
                        {
                            UserID = 3,
                            CourseID = 3
                        });
                });

            modelBuilder.Entity("Lesson", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("CourseID");

                    b.ToTable("Lessons");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CourseID = 1,
                            Description = "Przykładowy opis lekcji",
                            Title = "Przykładowy tytuł lekcji"
                        },
                        new
                        {
                            ID = 2,
                            CourseID = 2,
                            Description = "Przykładowy drugiego opis lekcji",
                            Title = "Przykładowy tytuł drugiego lekcji"
                        },
                        new
                        {
                            ID = 3,
                            CourseID = 3,
                            Description = "Przykładowy trzeciego opis lekcji",
                            Title = "Przykładowy tytuł trzeciego lekcji"
                        });
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Email = "kamils3542@gmail.com"
                        },
                        new
                        {
                            ID = 2,
                            Email = "kamils35422@gmail.com"
                        },
                        new
                        {
                            ID = 3,
                            Email = "kamils354222@gmail.com"
                        });
                });

            modelBuilder.Entity("UserProfile", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kamil",
                            Surname = "Sołtys"
                        },
                        new
                        {
                            ID = 2,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Andrzej",
                            Surname = "Lepper"
                        },
                        new
                        {
                            ID = 3,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tomek",
                            Surname = "Wielki"
                        });
                });

            modelBuilder.Entity("CourseEnrollment", b =>
                {
                    b.HasOne("Course", "Course")
                        .WithMany("CourseEnrollments")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User", "User")
                        .WithMany("CourseEnrollments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lesson", b =>
                {
                    b.HasOne("Course", "Course")
                        .WithMany("Lessons")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("UserProfile", b =>
                {
                    b.HasOne("User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("UserProfile", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Course", b =>
                {
                    b.Navigation("CourseEnrollments");

                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Navigation("CourseEnrollments");

                    b.Navigation("Profile")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
